{"version":3,"sources":[".eslintrc.js"],"names":["module","exports","env","browser","node","es2021","plugins","overrides","files","parserOptions","ecmaFeatures","impliedStrict","rules","no-console","sourceType","prettier/prettier","indent","semi","endOfLine","prefer-arrow-callback","require-await","props","no-unused-vars","no-param-reassign","allowTernary","allowShortCircuit","allowTaggedTemplates","code","ignoreComments","ignoreStrings","ignoreTemplateLiterals"],"mappings":"aAAAA,OAAOC,QAAU,CACfC,IAAK,CADPF,SAAOC,EACLC,MAAK,EACHC,UAAS,EACTC,QAAM,GAENC,QAAM,CAAE,qBAAA,WAAA,8BAAA,+BAJLC,QADU,CAAA,WAAA,OAAA,SAAA,OAAA,YAOfC,UAAS,CACTD,CAIIE,MAAA,CAAA,WACAA,UAAQ,qBAJD,CAWPA,MAAQ,CAAA,gBAGRC,cAAe,CACbC,aAAc,CACZC,eAAe,IAGnBC,MAAO,CACLC,aAAc,QAIhBX,CACEE,IAAI,CAFRA,MAAA,GAKEK,MAAAA,CAAAA,sBACEK,cAAY,CADCA,WAAA,YAKJL,cA1CA,CA6CfG,YAAO,UAELA,MAAA,CAKEG,oBAPG,CAWLC,QACAC,CACAC,UAAA,SAEAF,OAAA,CAAA,QAAgB,GAAOC,KAAA,CAAA,QAAA,UACvBE,wBAhBK,QAiBLC,gBAAA,QAAiCC,eAAO,MAATC,iBAjB1B,MAkBLC,oBAAA,CAAA,QACE,CADuBF,OAEvB,IACEG,wBADF,CACsB,QACpBC,CAAyBD,cAAA,EACzBE,mBAAoB,EAvBnBA,sBAAA,IA+BDC,oCADF,MAEEC,UAAAA,CACAC,QACAC,CAEDH,KAAA,IAJCC,gBAAgB,EAhCfC,eAAA,EA7CTC,wBAAA","file":".eslintrc.min.js","sourcesContent":["module.exports = {\r\n  env: {\r\n    browser: true,\r\n    node: true,\r\n    commonjs: true,\r\n    es2021: true,\r\n  },\r\n  extends: [\"eslint:recommended\", \"prettier\", \"plugin:prettier/recommended\", \"plugin:markdown/recommended\"],\r\n  plugins: [\"prettier\", \"node\", \"import\", \"html\", \"markdown\"],\r\n  overrides: [\r\n    {\r\n      // In v2, explicitly apply eslint-plugin-markdown's `markdown`\r\n      // processor on any Markdown files you want to lint.\r\n      files: [\"**/*.md\"],\r\n      processor: \"markdown/markdown\",\r\n    },\r\n    {\r\n      // In v2, configuration for fenced code blocks is separate from the\r\n      // containing Markdown file. Each code block has a virtual filename\r\n      // appended to the Markdown file's path.\r\n      files: [\"**/*.md/*.js\"],\r\n      // Configuration for fenced code blocks goes with the override for\r\n      // the code block's virtual filename, for example:\r\n      parserOptions: {\r\n        ecmaFeatures: {\r\n          impliedStrict: true,\r\n        },\r\n      },\r\n      rules: {\r\n        \"no-console\": \"off\",\r\n      },\r\n    },\r\n    {\r\n      env: {\r\n        node: true,\r\n      },\r\n      files: [\".eslintrc.{js,cjs}\"],\r\n      parserOptions: {\r\n        sourceType: \"script\",\r\n      },\r\n    },\r\n  ],\r\n  parserOptions: {\r\n    ecmaVersion: \"latest\",\r\n  },\r\n  rules: {\r\n    // \"off\" or 0 - turn the rule off\r\n    // \"warn\" or 1 - turn the rule on as a warning (doesn’t affect exit code)\r\n    // \"error\" or 2 - turn the rule on as an error (exit code is 1 when triggered)\r\n    // \"no-var\": \"off\",\r\n    \"prettier/prettier\": [\r\n      \"error\",\r\n      {\r\n        endOfLine: \"auto\",\r\n      },\r\n    ],\r\n    indent: [\"error\", 2],\r\n    semi: [\"error\", \"always\"],\r\n    \"prefer-arrow-callback\": \"error\", // Require using arrow functions for callbacks\r\n    \"require-await\": \"error\",\r\n    \"arrow-parens\": \"off\", //[\"error\", \"as-needed\"], // a => {}\r\n    \"no-unused-vars\": \"off\",\r\n    \"no-param-reassign\": [\"error\", { props: false }],\r\n    \"no-unused-expressions\": [\r\n      \"error\",\r\n      {\r\n        allowTernary: true, // a || b\r\n        allowShortCircuit: true, // a ? b : 0\r\n        allowTaggedTemplates: true,\r\n      },\r\n    ],\r\n    // \"import/no-extraneous-dependencies\": [\"error\", { \"includeInternal\": true,\"devDependencies\": false }],\r\n    \"import/no-extraneous-dependencies\": \"off\",\r\n    \"max-len\": [\r\n      \"error\",\r\n      {\r\n        code: 120,\r\n        ignoreComments: true,\r\n        ignoreStrings: true,\r\n        ignoreTemplateLiterals: true,\r\n      },\r\n    ], // prettier의 printWidth 옵션 대신 사용\r\n  },\r\n};\r\n"]}