<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hyden's Dev Blog</title><link>https://buenhyden.github.io/</link><description>Recent content on Hyden's Dev Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2022-{year} [Hugo Modules](https://hugomods.com/) and [HB Framework](https://hbstack.dev/). All Rights Reserved.</copyright><atom:link href="https://buenhyden.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Data Pipeline</title><link>https://buenhyden.github.io/docs/2023/10/data-pipeline/</link><pubDate>Sun, 22 Oct 2023 03:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/data-pipeline/</guid><description>Data Engineering Reference</description></item><item><title>Database 타입</title><link>https://buenhyden.github.io/docs/2023/10/database-%ED%83%80%EC%9E%85/</link><pubDate>Mon, 16 Oct 2023 16:26:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/database-%ED%83%80%EC%9E%85/</guid><description>관계형 데이터베이스 최적의 워크로드 관계형 데이터베이스는 일관성이 뛰어난 온라인 트랜잭션 프로세싱(OLTP) 애플리케이션을 위해 설계되어 온라인 분석 프로세싱(OLAP)에 적합 데이터 모델 관계형 모델은 데이터를 행과 열로 구성된 테이블로 정규화합니다. 스키마는 테이블, 행, 열, 인덱스, 테이블 간 관계, 기타 데이터베이스 요소를 정확하게 규정합니다. 데이터베이스는 테이블 사이의 관계에서 참조 무결성을 실현합니다. ACID 속성 관계형 데이터베이스는 원자가, 일관성, 격리성 및 지속성(ACID, atomicity, consistency, isolation, and durability)의 속성을 제공합니다:원자가는 완벽하게 실행하거나 혹은 전혀 실행하지 않는 트랜잭션을 필요로 합니다.</description></item><item><title>Django 웹 애플리케이션 서버 아키텍쳐</title><link>https://buenhyden.github.io/docs/2023/10/django-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%9C%EB%B2%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90/</link><pubDate>Mon, 16 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/django-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%9C%EB%B2%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90/</guid><description>Reference</description></item><item><title>Node.js 웹 애플리케이션 서버 아키텍쳐</title><link>https://buenhyden.github.io/docs/2023/10/node.js-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%9C%EB%B2%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90/</link><pubDate>Mon, 16 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/node.js-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%9C%EB%B2%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90/</guid><description>Reference</description></item><item><title>모바일 웹 어플리케이션 서버 아키텍처</title><link>https://buenhyden.github.io/docs/2023/10/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%9C%EB%B2%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</link><pubDate>Mon, 16 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%9C%EB%B2%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</guid><description>Reference</description></item><item><title>자바 기반 웹 어플리케이션 서버 아키텍처</title><link>https://buenhyden.github.io/docs/2023/10/%EC%9E%90%EB%B0%94-%EA%B8%B0%EB%B0%98-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%9C%EB%B2%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</link><pubDate>Mon, 16 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/%EC%9E%90%EB%B0%94-%EA%B8%B0%EB%B0%98-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%9C%EB%B2%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</guid><description>Reference</description></item><item><title>Git 설정하기</title><link>https://buenhyden.github.io/docs/2023/10/git-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</link><pubDate>Mon, 16 Oct 2023 11:52:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/git-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</guid><description>Git 설정하기 Git을 설치하고 나면 Git의 사용 환경을 적절하게 설정해 주어야 한다 환경 설정은 한 컴퓨터에서 한 번만 하면 되며, 설정한 내용은 Git을 업그레이드해도 유지되고, 언제든지 다시 바꿀 수 있는 명령어도 있다. git config라는 도구로 설정 내용을 확인하고 변경할 수 있다 git은 이 설정에 따라 동작한다 사용하는 설정 파일은 세 가지나 된다 /etc/gitconfig 시스템의 모든 사용자와 모든 저장소에 적용되는 설정 git config —system 옵셥으로 이 파일을 읽고 쓸 수 있다 ~/.</description></item><item><title>HTTP Status Code</title><link>https://buenhyden.github.io/docs/2023/10/http-status-code/</link><pubDate>Mon, 16 Oct 2023 11:52:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/http-status-code/</guid><description>응답은 5개의 그룹으로 나뉘어 진다 정보를 제공하는 응답 성공적인 응답 리다이렉트 클라이언트 에러 서버 에러 Reference HTTP status Code</description></item><item><title>Tools</title><link>https://buenhyden.github.io/docs/2023/10/tools/</link><pubDate>Sun, 15 Oct 2023 15:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/tools/</guid><description>종류 Kubernetes 구글에서 개발 기능이 가장 풍부함 널리 사용되는 CO 프레임웍 베어 메탈, VM 환경, 퍼블릿 클라우드 등의 다양한 환경에서 작동하도록 설계 컨테이너의 롤링 업그레이드 지원 강력한 컨테이너 서비스 배포 및 관리 기능 컨테이너를 쉽고 빠르게 배포/확장/관리하고 이를 자동화 해주는 가장 널리 사용되는 오픈소스 플랫폼 특성 yaml을 이용하여 클러스터의 모든 서비스를 정의 POD 스케줄링을 통해 복잡한 애플리케이션의 배포 관리 가능 하나의 마스터 서버와 노드가 필요 Discovery layer, Master Layer의 각 레이어에서 최소한 3개씩 필요 특징 Planet Scale (수 많은 컨테이너를 구동할 수 있는 확장성) Never Outgrow (다양한 요구 사항을 만족시킬 수 있는 유연함) Run Anywhere (온프레미스, 퍼블릭 클라우드, 하이브리드 환경 어디서나 동작) Docker Swarm Docker 호스트 클러스터를 조정하기 가장 쉬운 오케스트레이션 프레임 워크 여러 개의 Docker 호스트를 함께 클러스터링하여 단일 가상 Docker 호스트를 생성 호스트 OS에 Agent만 설치하면 간단하게 작동하고 설정이 쉬움 Docker 명령어와 Compose를 그대로 사용가능 특성 도커 기반에서 컨테이너 클러스터를 만들고 관리하는 툴 쿠버네티스에 비해 설정이 쉽다는 장점을 가짐 manager 노드와 worker노드를 통해 컨테이너를 관리 구성 manager node (클러스터의 상태 유지 및 스케줄링 &amp;lt;worker 노드에 컨테이너 배포&amp;gt;) worker node (애플리케이션이 실행되는 노드) Apache Mesos 수만 대의 물리적 시스템으로 확장할 수 있도록 설계된 오케스트레이션 프레임워크 하둡, MPI, Hypertable, Spark 같은 응용프로그램을 동적 클러스터 환경에서 리소스 공유와 분리를 통해 최적화 가능 Docker 컨테이너를 적극적으로 지원 다른 서비스와 함께 응용프로그램을 배치하기에 적합 대규모 클러스터링을 지원하고 Hadoop, Kafka 및 Spark와 같은 다른 서비스와 함께 응용 프로그램을 배치해야 하는 환경에 특히 적합 특성 Json 기반으로 작동하는 컨테이너 오케스트레이션 하나의 마스터, 하나의 슬레이브 구조 최소 3개의 마스터와 여러 개의 슬레이브가 필요 대~초대형 스케일 클러스터에 적합한 도구 Reference</description></item><item><title>Git 시작하기</title><link>https://buenhyden.github.io/docs/2023/10/git-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link><pubDate>Sun, 15 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/git-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid><description>특성 Git은 데이터를 파일 시스템 스냅샷(snapshot)의 연속으로 취급하고 크기가 아주 작다.
Git은 커밋(commit)하거나 프로젝트의 상태를 저장할 때마다 파일이 존재하는 그 순간을 중요하게 여긴다.
파일이 달라지지 않았으면 Git은 성능을 위해서 파일을 새로 저장하지 않고 이전 상태의 파일에 대한 링크만 저장한다. Git은 데이터를 저장하기 전에 항상 체크섬(checksum)을 구하고 그 체크섬(checksum)으로 데이터를 관리한다.
체크섬(checksum)을 이해하는 Git없이는 어떠한 파일이나 디렉토리도 변경할 수 없다 체크섬(checksum)은 Git에서 사용하는 가장 기본적인 데이터 단위이자 Git의 기본 철학이다 Git없이는 체크섬을 다룰 수 없어서 파일의 상태도 알 수 없고 심지어 데이터를 잃어버릴 수도 없다 세 가지 상태</description></item></channel></rss>