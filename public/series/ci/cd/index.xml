<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on Hyden's Dev Blog</title><link>https://buenhyden.github.io/series/ci/cd/</link><description>Recent content in CI/CD on Hyden's Dev Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2022-{year} [Hugo Modules](https://hugomods.com/) and [HB Framework](https://hbstack.dev/). All Rights Reserved.</copyright><atom:link href="https://buenhyden.github.io/series/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 설정하기</title><link>https://buenhyden.github.io/docs/2023/10/git-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</link><pubDate>Mon, 16 Oct 2023 11:52:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/git-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</guid><description>Git 설정하기 Git을 설치하고 나면 Git의 사용 환경을 적절하게 설정해 주어야 한다 환경 설정은 한 컴퓨터에서 한 번만 하면 되며, 설정한 내용은 Git을 업그레이드해도 유지되고, 언제든지 다시 바꿀 수 있는 명령어도 있다. git config라는 도구로 설정 내용을 확인하고 변경할 수 있다 git은 이 설정에 따라 동작한다 사용하는 설정 파일은 세 가지나 된다 /etc/gitconfig 시스템의 모든 사용자와 모든 저장소에 적용되는 설정 git config —system 옵셥으로 이 파일을 읽고 쓸 수 있다 ~/.</description></item><item><title>CI &amp; CD</title><link>https://buenhyden.github.io/docs/dev-ops/ci-cd/</link><pubDate>Sun, 15 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/dev-ops/ci-cd/</guid><description> 기능적인 소프트웨어 제공 시 문제 발생 위험을 줄이고자 코드를 지속적으로테스트하고 배포하는 전술 팀이 짧은 주기로 소프트웨어를 개발하는 소프트웨어 공학적 접근의 하나 소프트웨어가 언제든지 신뢰 가능한 수준으로 출시될 수 있도록 보증하기 위한 것 소프트웨어를 더 빠르게 더 주기적으로 빌드하고 테스트하고 출시하는 것을 목표로 한다 Reference</description></item><item><title>Continuous Deployment(CD)</title><link>https://buenhyden.github.io/docs/dev-ops/ci-cd/cd/</link><pubDate>Sun, 15 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/dev-ops/ci-cd/cd/</guid><description> Reference</description></item><item><title>Continuous Integration(CI)</title><link>https://buenhyden.github.io/docs/dev-ops/ci-cd/ci/</link><pubDate>Sun, 15 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/dev-ops/ci-cd/ci/</guid><description> Reference</description></item><item><title>Git</title><link>https://buenhyden.github.io/docs/dev-ops/ci-cd/ci/versioncontrol/git/</link><pubDate>Sun, 15 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/dev-ops/ci-cd/ci/versioncontrol/git/</guid><description>Git Version 관리 Reference Git</description></item><item><title>Git 시작하기</title><link>https://buenhyden.github.io/docs/2023/10/git-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link><pubDate>Sun, 15 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/2023/10/git-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid><description>특성 Git은 데이터를 파일 시스템 스냅샷(snapshot)의 연속으로 취급하고 크기가 아주 작다.
Git은 커밋(commit)하거나 프로젝트의 상태를 저장할 때마다 파일이 존재하는 그 순간을 중요하게 여긴다.
파일이 달라지지 않았으면 Git은 성능을 위해서 파일을 새로 저장하지 않고 이전 상태의 파일에 대한 링크만 저장한다. Git은 데이터를 저장하기 전에 항상 체크섬(checksum)을 구하고 그 체크섬(checksum)으로 데이터를 관리한다.
체크섬(checksum)을 이해하는 Git없이는 어떠한 파일이나 디렉토리도 변경할 수 없다 체크섬(checksum)은 Git에서 사용하는 가장 기본적인 데이터 단위이자 Git의 기본 철학이다 Git없이는 체크섬을 다룰 수 없어서 파일의 상태도 알 수 없고 심지어 데이터를 잃어버릴 수도 없다 세 가지 상태</description></item><item><title>Version Control</title><link>https://buenhyden.github.io/docs/dev-ops/ci-cd/ci/versioncontrol/</link><pubDate>Sun, 15 Oct 2023 12:46:00 +0900</pubDate><guid>https://buenhyden.github.io/docs/dev-ops/ci-cd/ci/versioncontrol/</guid><description> Reference</description></item></channel></rss>